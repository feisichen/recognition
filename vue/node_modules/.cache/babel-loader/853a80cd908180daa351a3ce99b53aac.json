{"ast":null,"code":"import * as api from '@/configs/api';\nexport default {\n  name: 'files',\n\n  data() {\n    return {\n      modelName: '数据',\n      menuItem: [],\n      dataList: [],\n      // 文件\n      folderImg: '/static/img/application/folder.png',\n      fileImg: '/static/img/application/file.png',\n      options: {\n        // 目标上传 URL，可以是字符串也可以是函数，如果是函数的话，则会传入 Uploader.File 实例、\n        // 当前块 Uploader.Chunk 以及是否是测试模式，默认值为 '/'\n        target: function (file, chunkFile, mode) {\n          // 分块上传前每次都会进入到该方法\n          const key = chunkFile.offset; // 键值 用于获取分块链接URL\n\n          return file.chunkUrlData[key];\n        },\n        // 为每个块向服务器发出 GET 请求，以查看它是否已经存在。如果在服务器端实现，\n        // 这将允许在浏览器崩溃甚至计算机重新启动后继续上传。(默认: true)\n        testChunks: false,\n        // 分块时按照该值来分。最后一个上传块的大小是可能是大于等于1倍的这个值但是小于两倍的这个值大小，\n        // 可见这个 Issue #51，默认 1*1024*1024。\n        chunkSize: 5 * 1024 * 1024,\n        // 强制所有块小于或等于 chunkSize。否则，最后一个块将大于或等于chunkSize。(默认: false)\n        forceChunkSize: true,\n        // 服务器分片校验函数 秒传及断点续传的基础(true:不用传 false:需要传)\n        // checkChunkUploadedByResponse: (chunk, message) => {\n        // 这里根据实际业务来 用来判断哪些片已经上传过了 不用再重复上传了 [这里可以用来写断点续传！！！]\n        //  return false\n        // },\n        // 包含在带有数据的多部分 POST 中的额外参数。这可以是一个对象或一个函数。如果是一个函数，\n        // 它将被传递一个 Uploader.File、一个 Uploader.Chunk 对象和一个 isTest 布尔值（默认值{}：）\n        query: function (file, chunkFile, mode) {\n          const data = {\n            partNumber: chunkFile.offset + 1\n          };\n          return data;\n        },\n        uploadMethod: \"PUT\",\n        //  当上传的时候所使用的是方式，可选 multipart、octet，默认 multipart，参考 multipart vs octet。\n        // MiniO 的分片不能使用表单\n        method: \"octet\",\n        //  处理请求参数，默认 function (params) {return params}，一般用于修改参数名字或者删除参数。0.5.2版本后，\n        processParams: function (params) {\n          return {};\n        } // headers: {\n        //  'Content-Type': 'binary/octet-stream'\n        // }\n\n      },\n      fileStatusText: {\n        success: \"上传成功\",\n        error: \"上传失败\",\n        uploading: \"上传中\",\n        paused: \"暂停中\",\n        waiting: \"等待中\"\n      },\n      isShowDropUploadFileLists: false,\n      collapse: false,\n      chunkSize: 5 * 1024 * 1024,\n      // 切片大小(b)\n      fileSetCode: null,\n      // 修改时的数据集编码\n      // fileListVisible: false, // 分布式文件上传列表是否展示\n      filePath: '',\n      dataSetCode: '',\n      // 文件路径\n      showDownIcon: true,\n      isAllCover: -1,\n      // 是否选择全部替换(-1:未选择 0：否 1:是)\n      timeOut: null\n    };\n  },\n\n  props: {\n    // 查询文件路径传参\n    filePathUrl: {\n      type: String,\n      required: true,\n      default: ''\n    },\n    // 存储类型：其他、论文\n    fileType: {\n      type: String,\n      required: true,\n      default: ''\n    },\n    metadataInfoCnId: {\n      type: String,\n      required: false\n    }\n  },\n  watch: {\n    fileType: {\n      handler(newVal, oldVal) {\n        if (this.menuItem[0]) this.breadcrumb(this.fileType + '/' + this.menuItem[0]);\n        console.log(1);\n      },\n\n      deep: true\n    }\n  },\n\n  mounted() {\n    console.log('filePathUrl', this.filePathUrl);\n    this.showDownIcon = this.$route.query.id ? true : false;\n\n    if (this.filePathUrl) {\n      this.$emit('getCurrentDataSetCode', this.filePathUrl.split(\"/\")[1]);\n      this.breadcrumb(this.filePathUrl);\n    } else {\n      if (this.menuItem[0]) this.breadcrumb(this.fileType + '/' + this.menuItem[0]);\n    }\n  },\n\n  methods: {\n    //时间戳转化成格式时间\n    timeConversion(te) {\n      if (te == '') {\n        return '';\n      } else if (te.length == 10) {\n        var time = new Date(te * 1000); //时间戳为10位需*1000，时间戳为13位的话不需乘1000\n\n        var y = time.getFullYear();\n        var m = time.getMonth() < 9 ? '0' + (time.getMonth() + 1) : time.getMonth() + 1;\n        var d = time.getDate() < 10 ? '0' + time.getDate() : time.getDate();\n        var h = time.getHours() < 10 ? '0' + time.getHours() : time.getHours();\n        var mm = time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes();\n        var s = time.getSeconds() < 10 ? '0' + time.getSeconds() : time.getSeconds();\n        var timedate = y + '-' + m + '-' + d + ' ' + h + ':' + mm + ':' + s;\n        return timedate;\n      } else {\n        var time = new Date(te);\n        var y = time.getFullYear();\n        var m = time.getMonth() < 9 ? '0' + (time.getMonth() + 1) : time.getMonth() + 1;\n        var d = time.getDate() < 10 ? '0' + time.getDate() : time.getDate();\n        var h = time.getHours() < 10 ? '0' + time.getHours() : time.getHours();\n        var mm = time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes();\n        var s = time.getSeconds() < 10 ? '0' + time.getSeconds() : time.getSeconds();\n        var timedate = y + '-' + m + '-' + d + ' ' + h + ':' + mm + ':' + s;\n        return timedate;\n      }\n    },\n\n    // 批量下载\n    downloadAll() {\n      var pathArr = [];\n      this.dataList.forEach(item => {\n        if (item['active']) {\n          pathArr.push(item);\n        }\n      });\n\n      if (pathArr.length == 0) {\n        this.$message({\n          type: 'warning',\n          message: '请先选择文件'\n        });\n      } else {\n        var formData = new FormData();\n        formData.append('datasetId', this.metadataInfoCnId);\n        formData.append('downPaths', JSON.stringify(pathArr));\n        this.axios.post(api['collection'].downloadFiles, formData, {\n          responseType: \"blob\"\n        }).then(response => {\n          console.log(response);\n          this.makeDownload(response, '压缩包');\n        });\n      }\n    },\n\n    // 批量删除\n    deleteAll() {\n      var deleteArr = [];\n      this.dataList.forEach(item => {\n        if (item['active']) {\n          deleteArr.push(item.objectName);\n        }\n      });\n\n      if (deleteArr.length == 0) {\n        this.$message({\n          type: 'warning',\n          message: '请先选择文件'\n        });\n      } else {\n        console.log(deleteArr);\n        this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          var formData = new FormData();\n          formData.append('filePaths', deleteArr);\n          formData.append('type', 0);\n          this.axios.post(api['collection'].deleteDistributedFiles, formData).then(response => {\n            let res = response.data;\n\n            if (res.code === 200) {\n              this.getCatalog(this.filePath);\n            } else {}\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '已取消删除'\n          });\n        });\n      }\n    },\n\n    /**\r\n     * 执行下载操作 判断是否文件夹\r\n     * @param {*} value 下载项数据\r\n     */\n    handleDownload(value) {\n      const query = this.$route.query;\n\n      if (query.id) {\n        if (value.isDir) {\n          this.downloadDirResult(value, this.metadataInfoCnId);\n        } else {\n          this.downloadFileResult(value, this.metadataInfoCnId);\n        }\n      }\n    },\n\n    /**\r\n     * 双击文件夹\r\n     * @param {*} value 文件夹参数\r\n     */\n    openFolder(value) {\n      clearTimeout(this.timeOut);\n\n      if (value.isDir) {\n        this.breadcrumb(value.objectName);\n      }\n    },\n\n    /**\r\n     * 单击文件或文件夹\r\n     * @param {*} value 文件参数\r\n     */\n    selectFiles(value, index) {\n      clearTimeout(this.timeOut);\n      this.timeOut = setTimeout(() => {\n        this.dataList[index]['active'] = value.active ? !value.active : true;\n        var arr = this.dataList;\n        this.dataList = [];\n        this.dataList = arr;\n      }, 600); // this.getCatalog(this.filePath,index,value.active ? !value.active : true)\n    },\n\n    /**\r\n     * 删除文件或文件夹\r\n     * @param {*} fileName 文件名称\r\n     * @param {*} isDir 是否文件夹\r\n     */\n    handleRemove(fileName, size, item) {\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.$emit('deleteDistributedFile', fileName);\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n\n    /**\r\n     * 下载文件\r\n     * @param {*} pathFile 文件路径\r\n     */\n    downloadFileResult(value, id) {\n      var formData = new FormData();\n      formData.append('minioPath', value.objectName);\n      formData.append('dataSize', value.size);\n      formData.append('datasetId', id);\n      this.axios.post(api['collection'].downloadSingle, formData).then(response => {\n        let res = response.data;\n\n        if (res.code === 200) {\n          window.open(res.data);\n        } else {}\n      });\n    },\n\n    /**\r\n     * 下载文件夹\r\n     * @param {*} value\r\n     */\n    downloadDirResult(value, id) {\n      //防止用户多次点击\n      this.dataListLoading = true;\n      var formData = new FormData();\n      formData.append('minioPath', value.objectName);\n      formData.append('dataSize', value.size);\n      formData.append('datasetId', id);\n      this.axios.post(api['collection'].downloadSingleDir, formData, {\n        responseType: \"blob\"\n      }).then(response => {\n        this.makeDownload(response, value.fileName);\n      });\n    },\n\n    /**\r\n     * 根据类型（文件或文件夹）显示图片\r\n     * @param {*} idDir\r\n     */\n    getImageUrl(idDir) {\n      return idDir ? this.folderImg : this.fileImg;\n    },\n\n    /**\r\n     * 文件夹路径\r\n     * @param {*} path\r\n     */\n    breadcrumb(path) {\n      this.filePath = path;\n\n      if (path !== \"\") {\n        this.menuItem = [];\n        if (path[path.length - 1] != '/') path = path + '/';\n        var arr = path.split(\"/\");\n\n        for (var i = 0; i < arr.length - 1; i++) {\n          this.menuItem.push({\n            name: arr[i],\n            path: arr.slice(0, i + 1).join(\"/\")\n          });\n        }\n\n        this.menuItem.splice(0, 1);\n      } else {\n        this.menuItem = [];\n      }\n\n      this.getCatalog(path);\n    },\n\n    //扁平化数据处理\n    dataTree(data) {\n      let result = [];\n\n      for (const item of data) {\n        result.push(item);\n\n        if (item.children === null || item.children === undefined) {\n          continue;\n        }\n\n        let getChildren = dataTree(item.children);\n        result = result.concat(getChildren);\n      }\n\n      return result;\n    },\n\n    getCatalog(minioPath) {\n      if (minioPath === '') minioPath = this.menuItem[this.menuItem.length - 1].path;\n      if (!minioPath) this.dataList = [];\n      var formData = new FormData();\n      formData.append('url', minioPath);\n      this.axios.post(api['collection'].getDfsFileList, formData).then(response => {\n        let res = response.data;\n\n        if (res.code === 200) {\n          this.dataList = res.data.list;\n        } else {}\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n\n    makeDownload(response, fileName) {\n      let fileBlob = new Blob([response.data]);\n\n      if (fileBlob.size <= 0) {\n        return this.$notify({\n          title: \"警告\",\n          message: \"后台执行中请稍后下载\",\n          type: \"warning\"\n        });\n      }\n\n      let url = window.URL.createObjectURL(fileBlob);\n      let link = document.createElement(\"a\");\n      link.style.display = \"none\";\n      link.href = url;\n      link.setAttribute(\"download\", fileName + \".zip\");\n      document.body.appendChild(link);\n      link.click();\n    },\n\n    // 分布式上传文件\n    //未调用到 待测试用处\n    onCatchAll(event) {},\n\n    //开始上传时进入\n    onUploadStart(file) {},\n\n    onFileAdded(file) {\n      file.minioPath = this.minioPath;\n\n      if (file.getSize() >= 5 * 1024 * 1024 * 1024) {\n        // 5G\n        file.ignored = true; //文件校验，不符规则的文件过滤掉\n\n        return this.$message.error(file.name + \"文件过大请处理完成后重新上传\");\n      }\n\n      this.isShowDropUploadFileLists = true;\n    },\n\n    onFilesAdded(file, filelist) {},\n\n    // 根下的单个文件（文件夹）上传完成\n    fileComplete(rootFile) {\n      this.$message({\n        message: rootFile.name + \"上传成功！\",\n        type: \"success\"\n      });\n      var index = this.filePath.lastIndexOf('/'); // this.breadcrumb(this.filePath.substring(0, index))\n\n      this.breadcrumb(this.filePath);\n\n      if (rootFile.isFolder) {} else {}\n    },\n\n    async filesSubmitted(files, fileList) {\n      if (files.length === 0) {\n        return this.$message.error(\"文件列表存在同名文件，请关闭文件列表后再试。\");\n      }\n\n      for (let file of files) {\n        const path = this.filePath;\n        const name = '/' + file.relativePath;\n        const size = file.size;\n        var formData = new FormData();\n        formData.append('concurrentType', this.fileType);\n        formData.append('fileName', path + name);\n        formData.append('partCount', Math.ceil(size / this.chunkSize));\n        formData.append('fileSize', size);\n\n        if (this.fileSetCode) {\n          formData.append('datasetCode', this.fileSetCode);\n        }\n\n        let res = await this.submitFile(formData, file);\n      }\n\n      this.isAllCover = -1;\n    },\n\n    // 文件提交\n    submitFile(formData, file) {\n      return new Promise((resolve, reject) => {\n        this.axios.post(api['collection'].uploadTestFile, formData).then(response => {\n          let res = response.data;\n\n          if (res.code === 200) {\n            setTimeout(() => {\n              file.chunkUrlData = res.data.ulist;\n              file.chunkUrlData.uploadId = res.data.uploadId;\n              file.path = res.data.fileName;\n\n              if (this.menuItem.length == 0) {\n                this.filePath = this.fileType + '/' + res.data.datasetCode;\n              } else {\n                this.filePath = this.menuItem[this.menuItem.length - 1].path;\n              }\n\n              this.dataSetCode = res.data.datasetCode;\n              this.$emit('getCurrentDataSetCode', res.data.datasetCode);\n              this.$emit('deletePath', res.data.fileName); // 存在重复文件\n\n              if (res.data.isExist) {\n                if (this.isAllCover === 1) {\n                  // 已选择全部替换\n                  this.startUpload(file, false);\n                  resolve();\n                } else if (this.isAllCover === -1) {\n                  // 询问是否需要全部替换\n                  this.$confirm('存在重复文件, 是否全部替换?', '提示', {\n                    confirmButtonText: '全部替换',\n                    cancelButtonText: '逐一替换',\n                    type: 'warning'\n                  }).then(() => {\n                    this.isAllCover = 1;\n                    this.startUpload(file, false);\n                    resolve();\n                  }).catch(() => {\n                    this.isAllCover = 0; // 选择逐一替换\n\n                    this.$confirm(file.name + '已存在, 是否选择替换?', '提示', {\n                      confirmButtonText: '确定',\n                      cancelButtonText: '取消',\n                      type: 'warning'\n                    }).then(() => {\n                      this.startUpload(file, false);\n                      resolve();\n                    }).catch(() => {\n                      this.startUpload(file, true);\n                      resolve();\n                    });\n                  });\n                } else if (this.isAllCover === 0) {\n                  this.$confirm(file.name + '已存在, 是否选择替换?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                  }).then(() => {\n                    this.startUpload(file, false);\n                    resolve();\n                  }).catch(() => {\n                    this.startUpload(file, true);\n                    resolve();\n                  });\n                } // this.startUpload(file, res.data.isExist)\n\n              } else {\n                this.startUpload(file, res.data.isExist);\n                resolve();\n              }\n            }, 1000);\n          } else {}\n        }).catch(function (error) {\n          console.log(error);\n        });\n      });\n    },\n\n    // 开始上传\n    startUpload(file, isExist) {\n      if (isExist) {\n        file.cancel();\n      } else {\n        file.resume();\n      }\n    },\n\n    // 单个文件上传成功\n    onFileSuccess(rootFile, file, message) {\n      // 调用后台合并文件\n      if (file.chunks.length != 1) {\n        // const fileName = file.relativePath; // 文件名\n        const uploadId = file.chunkUrlData.uploadId; // uploadId\n\n        var formData = new FormData();\n        formData.append('objectName', file.path);\n        formData.append('uploadId', uploadId);\n        this.axios.post(api['collection'].completeUploadFile, formData).then(response => {\n          let res = response.data;\n\n          if (res.code === 200) {\n            this.breadcrumb(this.filePath);\n          } else {}\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {}\n    },\n\n    onFileRemoved(file) {},\n\n    // 文件上传失败\n    onFileError(file) {\n      this.$message({\n        message: \"上传失败，请重试！\",\n        type: \"error\"\n      });\n    },\n\n    // 点击关闭按钮\n    closeFilesUploadList() {\n      this.$confirm(this.$t(\"确定进行[关闭]操作?\", {\n        handle: this.$t(\"close\")\n      }), \"待传任务将取消\", {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: \"warning\"\n      }).then(() => {\n        this.uploaderRef.cancel();\n        this.isShowDropUploadFileLists = false;\n      }).catch(() => {});\n    },\n\n    // 上传完毕\n    complete() {}\n\n  },\n  computed: {\n    // 获取上传文件实例\n    uploaderRef() {\n      return this.$refs.uploader.uploader;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["api","name","data","modelName","menuItem","dataList","folderImg","fileImg","options","target","file","chunkFile","mode","key","offset","chunkUrlData","testChunks","chunkSize","forceChunkSize","query","partNumber","uploadMethod","method","processParams","params","fileStatusText","success","error","uploading","paused","waiting","isShowDropUploadFileLists","collapse","fileSetCode","filePath","dataSetCode","showDownIcon","isAllCover","timeOut","props","filePathUrl","type","String","required","default","fileType","metadataInfoCnId","watch","handler","newVal","oldVal","breadcrumb","console","log","deep","mounted","$route","id","$emit","split","methods","timeConversion","te","length","time","Date","y","getFullYear","m","getMonth","d","getDate","h","getHours","mm","getMinutes","s","getSeconds","timedate","downloadAll","pathArr","forEach","item","push","$message","message","formData","FormData","append","JSON","stringify","axios","post","downloadFiles","responseType","then","response","makeDownload","deleteAll","deleteArr","objectName","$confirm","confirmButtonText","cancelButtonText","deleteDistributedFiles","res","code","getCatalog","catch","handleDownload","value","isDir","downloadDirResult","downloadFileResult","openFolder","clearTimeout","selectFiles","index","setTimeout","active","arr","handleRemove","fileName","size","downloadSingle","window","open","dataListLoading","downloadSingleDir","getImageUrl","idDir","path","i","slice","join","splice","dataTree","result","children","undefined","getChildren","concat","minioPath","getDfsFileList","list","fileBlob","Blob","$notify","title","url","URL","createObjectURL","link","document","createElement","style","display","href","setAttribute","body","appendChild","click","onCatchAll","event","onUploadStart","onFileAdded","getSize","ignored","onFilesAdded","filelist","fileComplete","rootFile","lastIndexOf","isFolder","filesSubmitted","files","fileList","relativePath","Math","ceil","submitFile","Promise","resolve","reject","uploadTestFile","ulist","uploadId","datasetCode","isExist","startUpload","cancel","resume","onFileSuccess","chunks","completeUploadFile","onFileRemoved","onFileError","closeFilesUploadList","$t","handle","uploaderRef","complete","computed","$refs","uploader"],"sourceRoot":"","sources":["D:\\code\\Java\\image_recognition\\vue\\src\\views\\test.vue"],"sourcesContent":["<template>\r\n  <!-- 分布式上传文件列表 -->\r\n  <div class=\"files-wrapper\">\r\n    <uploader ref=\"uploader\" :options=\"options\" :auto-start=\"false\" :file-status-text=\"fileStatusText\"\r\n              class=\"uploader-example\" @catch-all=\"onCatchAll\" @upload-start=\"onUploadStart\" @file-added=\"onFileAdded\"\r\n              @files-added=\"onFilesAdded\" @file-complete=\"fileComplete\" @files-submitted=\"filesSubmitted\"\r\n              @file-success=\"(rootFile, file, message) => onFileSuccess(rootFile, file, message)\" @file-removed=\"onFileRemoved\"\r\n              @file-error=\"onFileError\" @complete=\"complete\">\r\n      <uploader-unsupport></uploader-unsupport>\r\n      <uploader-drop>\r\n        <div class=\"upload-title\">\r\n\r\n          <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n            <el-breadcrumb-item @click.native=\"breadcrumb(item.path + '/')\" class=\"breadcrumb-item\"\r\n                                v-for=\"(item, index) in menuItem\" :key=\"index\">\r\n              {{ item.name }}\r\n            </el-breadcrumb-item>\r\n          </el-breadcrumb>\r\n\r\n          <div class=\"upload-btn-group\">\r\n            <uploader-btn class=\"uploader-upload-btn\">上传文件</uploader-btn>\r\n            <uploader-btn class=\"uploader-upload-btn\" :directory=\"true\">上传文件夹</uploader-btn>\r\n            <el-tooltip effect=\"dark\" content=\"下载文件缓慢时：请更换网络，或分次下载\" placement=\"bottom\">\r\n              <el-button type=\"primary\" size=\"small\" @click=\"downloadAll\">批量下载</el-button>\r\n            </el-tooltip>\r\n            <!-- <el-button type=\"primary\" size=\"small\" @click=\"downloadAll\">批量下载</el-button> -->\r\n            <el-button type=\"primary\" size=\"small\" @click=\"deleteAll\">批量删除</el-button>\r\n          </div>\r\n\r\n        </div>\r\n        <div v-show=\"isShowDropUploadFileLists\" class=\"drog_list\">\r\n          <uploader-list>\r\n            <div slot-scope=\"props\" class=\"file-panel\" :class=\"{ collapse: collapse }\">\r\n              <div class=\"file-title\">\r\n                <div class=\"title\">文件列表</div>\r\n                <div class=\"operate\">\r\n                  <el-button type=\"text\" :title=\"collapse ? '展开' : '折叠'\" @click=\"collapse = !collapse\">\r\n                    <i :class=\"collapse ? 'el-icon-full-screen' : 'el-icon-minus'\" />\r\n                  </el-button>\r\n                  <el-button type=\"text\" title=\"关闭\" @click=\"closeFilesUploadList\">\r\n                    <i class=\"el-icon-close\" />\r\n                  </el-button>\r\n                </div>\r\n              </div>\r\n              <ul class=\"file-list\">\r\n\r\n                <!-- <div> -->\r\n                <div v-for=\"(file, i) in props.fileList\" :key=\"i\" class=\"file-info\">\r\n                  <uploader-file :list=\"true\" :file=\"file\">\r\n                  </uploader-file>\r\n                  <span>{{ timeConversion(file._lastProgressCallback) }}</span>\r\n                </div>\r\n                <div v-if=\"!props.fileList.length\" class=\"no-file\">\r\n                  <i class=\"iconfont icon-empty-file\" /> 暂无待上传文件\r\n                </div>\r\n              </ul>\r\n            </div>\r\n          </uploader-list>\r\n        </div>\r\n\r\n        <ul class=\"file-group\">\r\n          <li v-for=\"(item, index) in dataList\" :key=\"index\"\r\n              :class=\"[item['active'] ? 'file-item-active' : 'file-item']\" @dblclick=\"openFolder(item)\">\r\n            <img :src=\"getImageUrl(item.isDir)\" :class=\"item.isDir ? 'folderIcon' : 'fileIcon'\" />\r\n            <el-tooltip effect=\"dark\" :content=\"item.fileName\" placement=\"bottom\">\r\n              <span>{{ item.fileName }}</span>\r\n            </el-tooltip>\r\n            <i class=\"el-icon-check\" v-if=\"item['active']\"></i>\r\n\r\n            <el-tooltip effect=\"dark\" content=\"下载文件缓慢时：请更换网络，或分次下载\" placement=\"right\">\r\n              <div class=\"download-btn\" v-if=\"showDownIcon\" @click=\"handleDownload(item)\" />\r\n            </el-tooltip>\r\n            <div v-if=\"item.fileName !== 'coms_01' && item.fileName !== 'coms_02'\" class=\"remove-btn\"\r\n                 @click=\"handleRemove(item.objectName, item.size, item)\" />\r\n            <div class=\"file-mask\" @click=\"selectFiles(item, index)\"></div>\r\n          </li>\r\n        </ul>\r\n\r\n\r\n      </uploader-drop>\r\n\r\n    </uploader>\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as api from '@/configs/api'\r\n\r\nexport default {\r\n  name: 'files',\r\n  data() {\r\n    return {\r\n      modelName: '数据',\r\n      menuItem: [],\r\n      dataList: [], // 文件\r\n      folderImg: '/static/img/application/folder.png',\r\n      fileImg: '/static/img/application/file.png',\r\n      options: {\r\n        // 目标上传 URL，可以是字符串也可以是函数，如果是函数的话，则会传入 Uploader.File 实例、\r\n        // 当前块 Uploader.Chunk 以及是否是测试模式，默认值为 '/'\r\n        target: function (file, chunkFile, mode) {\r\n          // 分块上传前每次都会进入到该方法\r\n          const key = chunkFile.offset; // 键值 用于获取分块链接URL\r\n          return file.chunkUrlData[key];\r\n        },\r\n        // 为每个块向服务器发出 GET 请求，以查看它是否已经存在。如果在服务器端实现，\r\n        // 这将允许在浏览器崩溃甚至计算机重新启动后继续上传。(默认: true)\r\n        testChunks: false,\r\n        // 分块时按照该值来分。最后一个上传块的大小是可能是大于等于1倍的这个值但是小于两倍的这个值大小，\r\n        // 可见这个 Issue #51，默认 1*1024*1024。\r\n        chunkSize: 5 * 1024 * 1024,\r\n        // 强制所有块小于或等于 chunkSize。否则，最后一个块将大于或等于chunkSize。(默认: false)\r\n        forceChunkSize: true,\r\n        // 服务器分片校验函数 秒传及断点续传的基础(true:不用传 false:需要传)\r\n        // checkChunkUploadedByResponse: (chunk, message) => {\r\n        // 这里根据实际业务来 用来判断哪些片已经上传过了 不用再重复上传了 [这里可以用来写断点续传！！！]\r\n        //  return false\r\n        // },\r\n\r\n        // 包含在带有数据的多部分 POST 中的额外参数。这可以是一个对象或一个函数。如果是一个函数，\r\n        // 它将被传递一个 Uploader.File、一个 Uploader.Chunk 对象和一个 isTest 布尔值（默认值{}：）\r\n        query: function (file, chunkFile, mode) {\r\n          const data = { partNumber: chunkFile.offset + 1 };\r\n          return data;\r\n        },\r\n        uploadMethod: \"PUT\",\r\n        //  当上传的时候所使用的是方式，可选 multipart、octet，默认 multipart，参考 multipart vs octet。\r\n        // MiniO 的分片不能使用表单\r\n        method: \"octet\",\r\n        //  处理请求参数，默认 function (params) {return params}，一般用于修改参数名字或者删除参数。0.5.2版本后，\r\n        processParams: function (params) {\r\n          return {};\r\n        },\r\n        // headers: {\r\n        //  'Content-Type': 'binary/octet-stream'\r\n        // }\r\n      },\r\n      fileStatusText: {\r\n        success: \"上传成功\",\r\n        error: \"上传失败\",\r\n        uploading: \"上传中\",\r\n        paused: \"暂停中\",\r\n        waiting: \"等待中\",\r\n      },\r\n      isShowDropUploadFileLists: false,\r\n      collapse: false,\r\n      chunkSize: 5 * 1024 * 1024, // 切片大小(b)\r\n      fileSetCode: null, // 修改时的数据集编码\r\n      // fileListVisible: false, // 分布式文件上传列表是否展示\r\n      filePath: '',\r\n      dataSetCode: '', // 文件路径\r\n      showDownIcon: true,\r\n      isAllCover: -1, // 是否选择全部替换(-1:未选择 0：否 1:是)\r\n      timeOut: null,\r\n    }\r\n  },\r\n  props: {\r\n    // 查询文件路径传参\r\n    filePathUrl: {\r\n      type: String,\r\n      required: true,\r\n      default: ''\r\n    },\r\n    // 存储类型：其他、论文\r\n    fileType: {\r\n      type: String,\r\n      required: true,\r\n      default: ''\r\n    },\r\n    metadataInfoCnId: {\r\n      type: String,\r\n      required: false\r\n    }\r\n  },\r\n  watch: {\r\n    fileType: {\r\n      handler(newVal, oldVal) {\r\n        if (this.menuItem[0]) this.breadcrumb(this.fileType + '/' + this.menuItem[0])\r\n        console.log(1);\r\n      },\r\n      deep: true\r\n    },\r\n  },\r\n  mounted() {\r\n    console.log('filePathUrl', this.filePathUrl);\r\n    this.showDownIcon = this.$route.query.id ? true : false\r\n    if (this.filePathUrl) {\r\n      this.$emit('getCurrentDataSetCode', this.filePathUrl.split(\"/\")[1])\r\n      this.breadcrumb(this.filePathUrl);\r\n    } else {\r\n      if (this.menuItem[0]) this.breadcrumb(this.fileType + '/' + this.menuItem[0])\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    //时间戳转化成格式时间\r\n    timeConversion(te) {\r\n      if (te == '') {\r\n        return '';\r\n      } else if (te.length == 10) {\r\n        var time = new Date(te * 1000); //时间戳为10位需*1000，时间戳为13位的话不需乘1000\r\n        var y = time.getFullYear();\r\n        var m = time.getMonth() < 9 ? '0' + (time.getMonth() + 1) : time.getMonth() + 1;\r\n        var d = time.getDate() < 10 ? '0' + time.getDate() : time.getDate();\r\n        var h = time.getHours() < 10 ? '0' + time.getHours() : time.getHours();\r\n        var mm = time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes();\r\n        var s = time.getSeconds() < 10 ? '0' + time.getSeconds() : time.getSeconds();\r\n        var timedate = y + '-' + m + '-' + d + ' ' + h + ':' + mm + ':' + s;\r\n        return timedate;\r\n      } else {\r\n        var time = new Date(te);\r\n        var y = time.getFullYear();\r\n        var m = time.getMonth() < 9 ? '0' + (time.getMonth() + 1) : time.getMonth() + 1;\r\n        var d = time.getDate() < 10 ? '0' + time.getDate() : time.getDate();\r\n        var h = time.getHours() < 10 ? '0' + time.getHours() : time.getHours();\r\n        var mm = time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes();\r\n        var s = time.getSeconds() < 10 ? '0' + time.getSeconds() : time.getSeconds();\r\n        var timedate = y + '-' + m + '-' + d + ' ' + h + ':' + mm + ':' + s;\r\n        return timedate;\r\n      }\r\n    },\r\n    // 批量下载\r\n    downloadAll() {\r\n      var pathArr = []\r\n      this.dataList.forEach(item => {\r\n        if (item['active']) {\r\n          pathArr.push(item)\r\n        }\r\n      })\r\n      if (pathArr.length == 0) {\r\n        this.$message({\r\n          type: 'warning',\r\n          message: '请先选择文件'\r\n        });\r\n      } else {\r\n        var formData = new FormData();\r\n        formData.append('datasetId', this.metadataInfoCnId)\r\n        formData.append('downPaths', JSON.stringify(pathArr))\r\n        this.axios.post(api['collection'].downloadFiles, formData, {\r\n              responseType: \"blob\"\r\n            }\r\n        ).then(response => {\r\n          console.log(response);\r\n          this.makeDownload(response, '压缩包');\r\n        })\r\n      }\r\n    },\r\n    // 批量删除\r\n    deleteAll() {\r\n      var deleteArr = []\r\n      this.dataList.forEach(item => {\r\n        if (item['active']) {\r\n          deleteArr.push(item.objectName)\r\n        }\r\n      })\r\n      if (deleteArr.length == 0) {\r\n        this.$message({\r\n          type: 'warning',\r\n          message: '请先选择文件'\r\n        });\r\n      } else {\r\n        console.log(deleteArr);\r\n        this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(() => {\r\n          var formData = new FormData();\r\n          formData.append('filePaths', deleteArr)\r\n          formData.append('type', 0)\r\n          this.axios.post(api['collection'].deleteDistributedFiles, formData\r\n          ).then(response => {\r\n            let res = response.data\r\n            if (res.code === 200) {\r\n              this.getCatalog(this.filePath)\r\n            } else {\r\n\r\n            }\r\n          })\r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消删除'\r\n          });\r\n        });\r\n      }\r\n\r\n    },\r\n    /**\r\n     * 执行下载操作 判断是否文件夹\r\n     * @param {*} value 下载项数据\r\n     */\r\n    handleDownload(value) {\r\n      const query = this.$route.query\r\n      if (query.id) {\r\n        if (value.isDir) {\r\n          this.downloadDirResult(value, this.metadataInfoCnId);\r\n        } else {\r\n          this.downloadFileResult(value, this.metadataInfoCnId);\r\n        }\r\n      }\r\n\r\n\r\n    },\r\n    /**\r\n     * 双击文件夹\r\n     * @param {*} value 文件夹参数\r\n     */\r\n    openFolder(value) {\r\n      clearTimeout(this.timeOut);\r\n      if (value.isDir) {\r\n        this.breadcrumb(value.objectName);\r\n      }\r\n    },\r\n    /**\r\n     * 单击文件或文件夹\r\n     * @param {*} value 文件参数\r\n     */\r\n    selectFiles(value, index) {\r\n      clearTimeout(this.timeOut);\r\n      this.timeOut = setTimeout(() => {\r\n        this.dataList[index]['active'] = value.active ? !value.active : true\r\n        var arr = this.dataList\r\n        this.dataList = []\r\n        this.dataList = arr\r\n      }, 600)\r\n\r\n      // this.getCatalog(this.filePath,index,value.active ? !value.active : true)\r\n    },\r\n    /**\r\n     * 删除文件或文件夹\r\n     * @param {*} fileName 文件名称\r\n     * @param {*} isDir 是否文件夹\r\n     */\r\n    handleRemove(fileName, size, item) {\r\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.$emit('deleteDistributedFile', fileName)\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '已取消删除'\r\n        });\r\n      });\r\n    },\r\n    /**\r\n     * 下载文件\r\n     * @param {*} pathFile 文件路径\r\n     */\r\n    downloadFileResult(value, id) {\r\n      var formData = new FormData();\r\n      formData.append('minioPath', value.objectName)\r\n      formData.append('dataSize', value.size)\r\n      formData.append('datasetId', id)\r\n      this.axios.post(api['collection'].downloadSingle, formData\r\n      ).then(response => {\r\n        let res = response.data\r\n        if (res.code === 200) {\r\n          window.open(res.data);\r\n        } else {\r\n\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 下载文件夹\r\n     * @param {*} value\r\n     */\r\n    downloadDirResult(value, id) {\r\n      //防止用户多次点击\r\n      this.dataListLoading = true;\r\n      var formData = new FormData();\r\n      formData.append('minioPath', value.objectName)\r\n      formData.append('dataSize', value.size)\r\n      formData.append('datasetId', id)\r\n      this.axios.post(api['collection'].downloadSingleDir, formData, {\r\n\r\n            responseType: \"blob\"\r\n          }\r\n      ).then(response => {\r\n        this.makeDownload(response, value.fileName);\r\n      })\r\n\r\n    },\r\n    /**\r\n     * 根据类型（文件或文件夹）显示图片\r\n     * @param {*} idDir\r\n     */\r\n    getImageUrl(idDir) {\r\n      return idDir ? this.folderImg : this.fileImg;\r\n    },\r\n    /**\r\n     * 文件夹路径\r\n     * @param {*} path\r\n     */\r\n    breadcrumb(path) {\r\n      this.filePath = path\r\n      if (path !== \"\") {\r\n        this.menuItem = [];\r\n        if (path[path.length - 1] != '/') path = path + '/'\r\n        var arr = path.split(\"/\");\r\n        for (var i = 0; i < arr.length - 1; i++) {\r\n          this.menuItem.push({\r\n            name: arr[i],\r\n            path: arr.slice(0, i + 1).join(\"/\"),\r\n          });\r\n        }\r\n        this.menuItem.splice(0, 1);\r\n      } else {\r\n        this.menuItem = [];\r\n      }\r\n      this.getCatalog(path);\r\n    },\r\n    //扁平化数据处理\r\n    dataTree(data) {\r\n      let result = [];\r\n      for (const item of data) {\r\n        result.push(item);\r\n        if (item.children === null || item.children === undefined) {\r\n          continue;\r\n        }\r\n        let getChildren = dataTree(item.children);\r\n        result = result.concat(getChildren);\r\n      }\r\n      return result;\r\n    },\r\n\r\n    getCatalog(minioPath) {\r\n      if (minioPath === '') minioPath = this.menuItem[this.menuItem.length - 1].path\r\n      if (!minioPath) this.dataList = []\r\n      var formData = new FormData();\r\n      formData.append('url', minioPath)\r\n      this.axios.post(api['collection'].getDfsFileList, formData\r\n      ).then(response => {\r\n        let res = response.data\r\n        if (res.code === 200) {\r\n\r\n          this.dataList = res.data.list\r\n        } else {\r\n\r\n        }\r\n      })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n    },\r\n\r\n    makeDownload(response, fileName) {\r\n      let fileBlob = new Blob([response.data]);\r\n      if (fileBlob.size <= 0) {\r\n        return this.$notify({\r\n          title: \"警告\",\r\n          message: \"后台执行中请稍后下载\",\r\n          type: \"warning\",\r\n        });\r\n      }\r\n      let url = window.URL.createObjectURL(fileBlob);\r\n      let link = document.createElement(\"a\");\r\n      link.style.display = \"none\";\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName + \".zip\");\r\n\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    },\r\n    // 分布式上传文件\r\n    //未调用到 待测试用处\r\n    onCatchAll(event) {\r\n    },\r\n    //开始上传时进入\r\n    onUploadStart(file) {\r\n    },\r\n    onFileAdded(file) {\r\n      file.minioPath = this.minioPath;\r\n      if (file.getSize() >= 5 * 1024 * 1024 * 1024) {\r\n        // 5G\r\n        file.ignored = true; //文件校验，不符规则的文件过滤掉\r\n        return this.$message.error(file.name + \"文件过大请处理完成后重新上传\");\r\n      }\r\n      this.isShowDropUploadFileLists = true;\r\n    },\r\n    onFilesAdded(file, filelist) {\r\n\r\n    },\r\n    // 根下的单个文件（文件夹）上传完成\r\n    fileComplete(rootFile) {\r\n      this.$message({\r\n        message: rootFile.name + \"上传成功！\",\r\n        type: \"success\",\r\n      });\r\n      var index = this.filePath.lastIndexOf('/');\r\n      // this.breadcrumb(this.filePath.substring(0, index))\r\n      this.breadcrumb(this.filePath)\r\n      if (rootFile.isFolder) {\r\n\r\n      } else {\r\n      }\r\n    },\r\n    async filesSubmitted(files, fileList) {\r\n      if (files.length === 0) {\r\n        return this.$message.error(\"文件列表存在同名文件，请关闭文件列表后再试。\");\r\n      }\r\n\r\n      for (let file of files) {\r\n        const path = this.filePath\r\n        const name = '/' + file.relativePath\r\n        const size = file.size\r\n        var formData = new FormData();\r\n        formData.append('concurrentType', this.fileType)\r\n        formData.append('fileName', path + name)\r\n        formData.append('partCount', Math.ceil(size / this.chunkSize))\r\n        formData.append('fileSize', size)\r\n        if (this.fileSetCode) {\r\n          formData.append('datasetCode', this.fileSetCode)\r\n        }\r\n        let res = await this.submitFile(formData, file)\r\n      }\r\n      this.isAllCover = -1\r\n    },\r\n    // 文件提交\r\n    submitFile(formData, file) {\r\n      return new Promise((resolve, reject) => {\r\n        this.axios.post(api['collection'].uploadTestFile, formData\r\n        ).then(response => {\r\n          let res = response.data\r\n          if (res.code === 200) {\r\n            setTimeout(() => {\r\n              file.chunkUrlData = res.data.ulist\r\n              file.chunkUrlData.uploadId = res.data.uploadId\r\n              file.path = res.data.fileName\r\n              if (this.menuItem.length == 0) {\r\n                this.filePath = this.fileType + '/' + res.data.datasetCode\r\n              } else {\r\n                this.filePath = this.menuItem[this.menuItem.length - 1].path\r\n              }\r\n              this.dataSetCode = res.data.datasetCode\r\n              this.$emit('getCurrentDataSetCode', res.data.datasetCode)\r\n              this.$emit('deletePath', res.data.fileName)\r\n              // 存在重复文件\r\n              if (res.data.isExist) {\r\n                if (this.isAllCover === 1) { // 已选择全部替换\r\n                  this.startUpload(file, false)\r\n                  resolve()\r\n                } else if (this.isAllCover === -1) { // 询问是否需要全部替换\r\n                  this.$confirm('存在重复文件, 是否全部替换?', '提示', {\r\n                    confirmButtonText: '全部替换',\r\n                    cancelButtonText: '逐一替换',\r\n                    type: 'warning'\r\n                  }).then(() => {\r\n                    this.isAllCover = 1\r\n                    this.startUpload(file, false)\r\n                    resolve()\r\n                  }).catch(() => {\r\n                    this.isAllCover = 0 // 选择逐一替换\r\n                    this.$confirm(file.name + '已存在, 是否选择替换?', '提示', {\r\n                      confirmButtonText: '确定',\r\n                      cancelButtonText: '取消',\r\n                      type: 'warning'\r\n                    }).then(() => {\r\n                      this.startUpload(file, false)\r\n                      resolve()\r\n                    }).catch(() => {\r\n                      this.startUpload(file, true)\r\n                      resolve()\r\n                    });\r\n                  });\r\n                } else if (this.isAllCover === 0) {\r\n                  this.$confirm(file.name + '已存在, 是否选择替换?', '提示', {\r\n                    confirmButtonText: '确定',\r\n                    cancelButtonText: '取消',\r\n                    type: 'warning'\r\n                  }).then(() => {\r\n                    this.startUpload(file, false)\r\n                    resolve()\r\n                  }).catch(() => {\r\n                    this.startUpload(file, true)\r\n                    resolve()\r\n                  });\r\n                }\r\n                // this.startUpload(file, res.data.isExist)\r\n              } else {\r\n                this.startUpload(file, res.data.isExist)\r\n                resolve()\r\n              }\r\n\r\n\r\n            }, 1000);\r\n          } else {\r\n\r\n          }\r\n        })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n\r\n      })\r\n\r\n\r\n    },\r\n    // 开始上传\r\n    startUpload(file, isExist) {\r\n      if (isExist) {\r\n        file.cancel();\r\n      } else {\r\n        file.resume();\r\n      }\r\n    },\r\n    // 单个文件上传成功\r\n    onFileSuccess(rootFile, file, message) {\r\n\r\n      // 调用后台合并文件\r\n      if (file.chunks.length != 1) {\r\n        // const fileName = file.relativePath; // 文件名\r\n        const uploadId = file.chunkUrlData.uploadId; // uploadId\r\n        var formData = new FormData();\r\n        formData.append('objectName', file.path)\r\n        formData.append('uploadId', uploadId)\r\n        this.axios.post(api['collection'].completeUploadFile, formData\r\n        ).then(response => {\r\n          let res = response.data\r\n          if (res.code === 200) {\r\n\r\n            this.breadcrumb(this.filePath)\r\n          } else {\r\n\r\n          }\r\n        })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n      } else {\r\n      }\r\n    },\r\n    onFileRemoved(file) {\r\n    },\r\n    // 文件上传失败\r\n    onFileError(file) {\r\n      this.$message({\r\n        message: \"上传失败，请重试！\",\r\n        type: \"error\",\r\n      });\r\n    },\r\n    // 点击关闭按钮\r\n    closeFilesUploadList() {\r\n      this.$confirm(\r\n          this.$t(\"确定进行[关闭]操作?\", { handle: this.$t(\"close\") }),\r\n          \"待传任务将取消\",\r\n          {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: \"warning\",\r\n          }\r\n      )\r\n          .then(() => {\r\n            this.uploaderRef.cancel();\r\n            this.isShowDropUploadFileLists = false;\r\n          })\r\n          .catch(() => { });\r\n    },\r\n    // 上传完毕\r\n    complete() {\r\n\r\n    },\r\n  },\r\n  computed: {\r\n    // 获取上传文件实例\r\n    uploaderRef() {\r\n      return this.$refs.uploader.uploader;\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.files-wrapper {\r\n  width: 100%;\r\n  height: 690px;\r\n  position: relative;\r\n  /* overflow: auto; */\r\n  /* background-color: #00bbff; */\r\n}\r\n\r\n.uploader-example {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.uploader-drop {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 0 !important;\r\n  background: #fff !important;\r\n}\r\n\r\n/* 路径标题 */\r\n.upload-title {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  /* margin: 0px 40px 0px 40px; */\r\n  height: 40px;\r\n  align-items: center;\r\n}\r\n\r\n.upload-title>div {\r\n  font-size: 18px;\r\n  /* font-weight: bold; */\r\n}\r\n\r\n.breadcrumb-item {\r\n  cursor: pointer;\r\n}\r\n\r\n*/deep/ .el-breadcrumb__item .el-breadcrumb__inner {\r\n  color: #25262b5c;\r\n  font-weight: 500;\r\n}\r\n\r\n*/deep/ .el-breadcrumb__item:last-child .el-breadcrumb__inner {\r\n  color: #000;\r\n  font-weight: bold;\r\n}\r\n\r\n*/deep/ .el-breadcrumb__item {\r\n  cursor: pointer;\r\n}\r\n\r\n.upload-btn-group {\r\n  min-width: 200px;\r\n\r\n\r\n}\r\n\r\n.uploader-upload-btn {\r\n  color: #fff !important;\r\n  background-color: #409eff;\r\n  border-color: #409eff;\r\n  font-size: 12px;\r\n  border-radius: 3px;\r\n  /* padding: 7px 15px; */\r\n  margin: 5px 5px 5px 5px;\r\n  outline: 0;\r\n  font-weight: 500;\r\n\r\n\r\n}\r\n\r\n.uploader-upload-btn:hover {\r\n  background: #66b1ff;\r\n  border-color: #66b1ff;\r\n  color: #fff;\r\n}\r\n\r\n/* 文件按钮 */\r\n.btns {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n}\r\n\r\n/* 文件列表 */\r\n.file-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  overflow-y: auto;\r\n  max-height: 455px;\r\n  padding: 10px;\r\n  /* max-height: calc(100vh - 238px); */\r\n}\r\n\r\n.file-item {\r\n  background-color: #fff;\r\n  cursor: pointer;\r\n}\r\n\r\n.file-item {\r\n  width: 120px;\r\n  position: relative;\r\n  border-radius: 10px;\r\n  -webkit-transition: background-color 0.3s ease;\r\n  -o-transition: background-color 0.3s ease;\r\n  transition: background-color 0.3s ease;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-direction: column;\r\n  flex-direction: column;\r\n  -ms-flex-pack: start;\r\n  justify-content: flex-start;\r\n  -ms-flex-align: stretch;\r\n  align-items: center;\r\n  padding: 20px 0 0 0;\r\n  margin: 5px 16px 10px;\r\n  max-height: 160px;\r\n}\r\n\r\n.file-item>span:nth-child(2) {\r\n  width: 100%;\r\n  text-align: center;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  color: #25262b;\r\n  max-width: 100%;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n  -o-text-overflow: ellipsis;\r\n  text-overflow: ellipsis;\r\n  overflow-wrap: break-word;\r\n  margin-bottom: 2px;\r\n  -webkit-transition: color 0.3s ease;\r\n  -o-transition: color 0.3s ease;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.file-item>span:nth-child(3) {\r\n  width: 100%;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 1.6;\r\n  color: #25262b5c;\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  -o-text-overflow: ellipsis;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.download-btn {\r\n  display: block;\r\n  z-index: 2;\r\n}\r\n\r\n.remove-btn {\r\n  display: block;\r\n  z-index: 2;\r\n}\r\n\r\n.file-item:hover {\r\n  background: #f1f1f1;\r\n}\r\n\r\n.folderIcon {\r\n  width: 115px;\r\n  height: 90px;\r\n}\r\n\r\n.fileIcon {\r\n  width: 90px;\r\n  height: 90px;\r\n}\r\n\r\n.file-item:hover>.download-btn {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n  width: 24px;\r\n  height: 24px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  background: #fff url(\"/static/img/application/download.png\") no-repeat;\r\n  background-size: 80% 80%;\r\n  background-position: center center;\r\n\r\n}\r\n\r\n\r\n.file-item:hover>.download-btn:hover {\r\n  cursor: pointer;\r\n  background-color: #eaeaea;\r\n}\r\n\r\n.file-item:hover>.remove-btn {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n  width: 24px;\r\n  height: 24px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  background: #fff url(\"/static/img/application/delete.png\") no-repeat;\r\n  background-size: 80% 80%;\r\n  background-position: center center;\r\n\r\n}\r\n\r\n.file-item:hover>.remove-btn:hover {\r\n  cursor: pointer;\r\n  background-color: #eaeaea;\r\n}\r\n\r\n.file-mask {\r\n  position: absolute;\r\n  /* background-color: red; */\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* 批量选择样式 */\r\n.file-item-active {\r\n  background-color: #eaeaea;\r\n  cursor: pointer;\r\n  text-align: center;\r\n}\r\n\r\n.file-item-active {\r\n  width: 120px;\r\n  position: relative;\r\n  border-radius: 10px;\r\n  -webkit-transition: background-color 0.3s ease;\r\n  -o-transition: background-color 0.3s ease;\r\n  transition: background-color 0.3s ease;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-direction: column;\r\n  flex-direction: column;\r\n  -ms-flex-pack: start;\r\n  justify-content: flex-start;\r\n  -ms-flex-align: stretch;\r\n  align-items: center;\r\n  padding: 20px 0 0 0;\r\n  margin: 5px 16px 10px;\r\n  max-height: 160px;\r\n}\r\n\r\n.drog_list {\r\n  position: fixed;\r\n  position: absolute;\r\n  z-index: 20;\r\n  right: -25px;\r\n  bottom: -30px;\r\n  width: 620px;\r\n  box-sizing: border-box;\r\n\r\n}\r\n\r\n.file-panel {\r\n  background-color: #fff;\r\n  border: 1px solid #e2e2e2;\r\n  border-radius: 7px 7px 0 0;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n\r\n\r\n}\r\n\r\n\r\n.file-panel.collapse>.file-title {\r\n  background-color: #e7ecf2;\r\n}\r\n\r\n.file-panel.collapse>.file-list {\r\n  height: 0;\r\n}\r\n\r\n.file-title {\r\n  display: flex;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  padding: 0 15px;\r\n  border-bottom: 1px solid #ddd;\r\n\r\n\r\n}\r\n\r\n.operate {\r\n  flex: 1;\r\n  text-align: right;\r\n\r\n\r\n}\r\n\r\n.operate>i {\r\n  font-size: 18px;\r\n}\r\n\r\n.file-list {\r\n  position: relative;\r\n  height: 340px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  background-color: #fff;\r\n  transition: all 0.3s;\r\n  list-style: none;\r\n  padding: 0 2%;\r\n  font-size: 12px;\r\n}\r\n\r\n/* 文件列表 样式 */\r\n.file-info /deep/ .uploader-file>.uploader-file-info>.uploader-file-name {\r\n  width: 30%;\r\n}\r\n\r\n.file-info /deep/ .uploader-file>.uploader-file-info>.uploader-file-meta {\r\n  width: 0%;\r\n}\r\n\r\n.file-info {\r\n  position: relative;\r\n}\r\n\r\n.file-info>span {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 15px;\r\n}\r\n\r\n.custom-status {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 1;\r\n}\r\n\r\n.el-icon-check:before {\r\n  color: #24ed19;\r\n  position: absolute;\r\n  top: 0;\r\n  /* right: 0; */\r\n  left: 0;\r\n  font-size: 17px;\r\n  border: 1px solid #24ed19;\r\n  /* border-radius: 40px; */\r\n  padding: 4px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}